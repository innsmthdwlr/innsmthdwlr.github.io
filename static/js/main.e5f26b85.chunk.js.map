{"version":3,"sources":["assets/hypnotoad.gif","components/meal.tsx","components/day.tsx","components/diabetes.tsx","components/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toDate","dStr","format","now","Date","delimiter","indexOf","cut","substr","setHours","setMinutes","setSeconds","emptyStomachCutoff","breakfastCutoff","dinnerCutoff","supperCutoff","Meal","props","className","time","mealTime","measurements","noTag","tag","length","when","getMealTag","src","image","alt","description","map","measure","i","spanClass","measureTimeParam","measureValueParam","measureTime","measureValue","applyMeasurementClass","value","key","Day","diff","date","getTime","week","Math","ceil","meals","meal","DiabetesPage","todayDate","todayFormatted","getFullYear","getMonth","getDate","useState","searchTerm","setSearchTerm","React","searchResults","setSearchResults","jsonData","setJsonData","loadingRepo","setloadingRepo","searchResultChanged","setSearchResultChanged","useEffect","fetch","then","response","json","data","results","days","filter","day","type","name","onChange","event","target","HomePage","logo","App","basename","exact","path","component","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e5f26b85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hypnotoad.cc947b4c.gif\";","import React from 'react';\nimport './meal.css'\n//import placeholderImage from '../assets/loading.gif';\n\ninterface IMeasurement{\n  time: string;\n  value: number;\n}\n\nexport interface IMeal{\n  time: string;\n  image: string;\n  noTag: number;\n  description: string;\n  measurements: Array<IMeasurement>;\n}\n\nconst toDate = (dStr: string,format:string=\"h:m\") => {\n  var now = new Date();\n\tif (format === \"h:m\") {\n    let delimiter = dStr.indexOf(\":\");\n    let cut = dStr.substr(0,delimiter);\n \t\tnow.setHours(+cut);\n \t\tnow.setMinutes(+(cut)+1);\n     now.setSeconds(0);\n \t\treturn now;\n\t}else \n\t\treturn \"Invalid Format\";\n}\nconst applyMeasurementClass = (measureTimeParam: string, measureValueParam: number) => {\n  let spanClass = 'measurement-ok'\n  if(measureTimeParam === 'n/a'){\n    spanClass = ''\n  }\n  else{\n    let measureTime = toDate(measureTimeParam,\"h:m\");\n    let measureValue = +measureValueParam;\n    if (measureTime < toDate('07:00','h:m') && measureValue > 90){\n      spanClass = 'measurement-high';\n    }\n    if (measureTime >= toDate('07:00','h:m') && measureValue > 140){\n      spanClass = 'measurement-high';\n    }\n  }\n  return spanClass;  \n}\n\nconst emptyStomachCutoff = toDate('07:00','h:m');\nconst breakfastCutoff = toDate('10:00','h:m');\nconst dinnerCutoff = toDate('18:00','h:m');\nconst supperCutoff = toDate('21:00','h:m');\n\nconst getMealTag = (mealTime: string, measurements: Array<IMeasurement>, noTag: number) => {\n  let tag = '';\n  if (measurements.length && !noTag){\n    const when = toDate(mealTime,\"h:m\")\n    switch (true){\n      case when < emptyStomachCutoff:\n        tag = 'EMPTY STOMACH';\n        break;\n      case when >= emptyStomachCutoff && when < breakfastCutoff:\n        tag = 'BREAKFAST';\n        break;\n      case when >= breakfastCutoff && when < dinnerCutoff:\n        tag = 'DINNER';\n        break;\n      case when >= dinnerCutoff && when < supperCutoff:\n        tag = 'SUPPER';\n        break;\n      default:\n        break;\n    }\n  }\n\n  return tag;\n}\n\nconst Meal: React.SFC<IMeal> = (props) => {\n  return (\n    <div className=\"mealCard\">\n     <p>Meal started at: {props.time} <span className='measurement-tag'>{getMealTag(props.time, props.measurements, props.noTag)}</span></p>\n     <div>\n       <img className=\"mealImg\" src={props.image} alt={props.image} />\n     </div>\n     <p>Content: {props.description}</p>\n     <ul>\n      {\n        !(props.measurements.length) ? '' :\n          props.measurements.map( (measure: IMeasurement, i: number) => {\n            let spanClass = applyMeasurementClass(measure.time, measure.value);\n            return (\n              <li key={i}>{measure.time}: <span className={spanClass}>{measure.value} mg/dL</span></li>\n            );\n          })\n      }\n     </ul>\n    </div>\n  );\n}\n\nexport default Meal;","import React from 'react';\nimport Meal from './meal';\nimport './meal.css'\nimport {IMeal} from './meal';\n\n\nexport interface IDay\n{\n  \"date\": string; \n  \"meals\": { \n    \"time\": string; \n    \"image\": string; \n    \"description\": string; \n    \"noTag\": number;\n    \"measurements\": { \n      \"time\": string; \n      \"value\": number; \n    }[]; \n  }[]; \n}\n\nconst Day: React.SFC<IDay> = (props) => {\n    const diff = (new Date(props.date)).getTime() - (new Date('2019-05-19')).getTime();\n    const week = Math.ceil(diff / (1000 * 3600 * 24) / 7)\n\n    return (\n        <div className=\"dayCard\">\n            <p>\n                <strong>{props.date}</strong> {week}<sup>th</sup> week of pregnancy\n            </p>\n            <div>\n                {\n                    props.meals.map( (meal:IMeal, i: number) => {\n                        return (\n                            <Meal time={meal.time} image={meal.image} noTag={meal.noTag} description={meal.description} measurements={meal.measurements} />\n                        );\n                    })                \n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Day;","import React, {useState} from 'react';\nimport Day from './day';\nimport {IDay} from './day';\n\nconst DiabetesPage: React.FC = () => {\n  \n    const todayDate = new Date();\n    const todayFormatted = todayDate.getFullYear() + '-' + (todayDate.getMonth()+1) + '-' + todayDate.getDate();\n    \n    const [searchTerm, setSearchTerm] = useState(todayFormatted);\n    const [searchResults, setSearchResults] = React.useState<Array<IDay>>([]);\n    const [jsonData, setJsonData] = useState({});\n    const [loadingRepo, setloadingRepo] = useState(true);\n    const [searchResultChanged, setSearchResultChanged] = useState(true);\n  \n    const handleChange = (event: any) => \n    {\n      setSearchTerm(event.target.value);\n      setSearchResultChanged(true);\n    }\n    const url = 'https://dl.dropboxusercontent.com/s/ct056h9skhev9ro/registry.json';\n  \n    React.useEffect(() => {\n      if(loadingRepo){\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setJsonData(data);\n          setloadingRepo(false);\n        });\n      };\n  \n      if(!loadingRepo && searchResultChanged){\n        const results = (jsonData as any).days.filter( function (day:IDay) {\n          return day.date === searchTerm;\n        });\n        setSearchResults(results);\n        setSearchResultChanged(false);\n      }\n    }, [jsonData, loadingRepo, searchResultChanged, searchTerm]);\n  \n    return (\n      <div>\n        <h1>Blood glucose levels</h1>\n        <section>\n        <div className='datepicker'>\n          <label>\n            Pick a date: \n            <input type=\"date\" name=\"dateFilter\" onChange={handleChange} value={searchTerm} />\n          </label>\n        </div>\n        </section>\n        <div>\n        {\n          searchResults.map( (day:IDay, i:number) => <Day key={i} date={day.date} meals={day.meals} />)\n        }\n        </div>\n      </div>\n    );\n  }\n\n  export default DiabetesPage;\n\n\n//   export interface IDay\n// {\n//   \"date\": string; \n//   \"meals\": { \n//     \"time\": string; \n//     \"image\": string; \n//     \"description\": string; \n//     \"noTag\": number;\n//     \"measurements\": { \n//       \"time\": string; \n//       \"value\": number; \n//     }[]; \n//   }[]; \n// }","import React from 'react';\nimport logo from '../assets/hypnotoad.gif';\n\nconst HomePage: React.FC = () => {\n    return (\n      <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"image-cropper\" alt=\"logo\" />\n            <p>\n              All hail the hypnotoad!\n            </p>\n          </header>\n      </div>\n    )\n  };\n\n\nexport default HomePage;","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport DiabetesPage from './components/diabetes';\nimport HomePage from './components/home';\n\nconst App: React.FC = () => {\n  \n  return (\n    <HashRouter basename='/'>\n      <div>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/hidoc' component={DiabetesPage} />\n      </div>\n      <nav className='App-hidden'>\n        <ul>\n          <li>\n            <Link to='/'>Home</Link>\n            <Link to='/hidoc'>Diabetes</Link>\n          </li>\n        </ul>\n      </nav>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'lazysizes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}