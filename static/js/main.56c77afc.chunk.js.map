{"version":3,"sources":["assets/hypnotoad.gif","components/meal.js","components/day.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Meal","meal","className","time","src","image","alt","description","measurements","map","measure","i","key","value","Day","day","date","meals","DiabetesPage","jsonData","days","HomePage","logo","App","basename","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,uC,2+BCkB5BC,G,MAfF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,UAAU,YACd,6CAAmBD,EAAKE,MACxB,2BAAG,yBAAKD,UAAU,UAAUE,IAA8B,IAAMH,EAAKI,MAAOC,IAAKL,EAAKI,SACtF,2CAAiBJ,EAAKM,aACtB,4BAECN,EAAKO,aAAaC,KAAI,SAACC,EAASC,GAAV,OAAgB,wBAAIC,IAAKD,GAAID,EAAQP,KAArB,KAA4B,gCAASO,EAAQG,MAAjB,kBCYzDC,EAnBH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OACE,yBAAKb,UAAU,WACX,2BACI,gCAASa,EAAIC,OAEjB,6BAEQD,EAAIE,MAAMR,KAAK,SAACR,EAAMU,GAClB,OACI,kBAAC,EAAD,CAAMV,KAAMA,EAAMW,IAAKD,UCPzCO,EAAe,kBACjB,6BACE,oDAEEC,EAASC,KAAKX,KAAK,SAACM,EAAKJ,GAAN,OAAY,kBAAC,EAAD,CAAKI,IAAKA,EAAKH,IAAKD,SAKrDU,EAAW,kBACb,yBAAKnB,UAAU,OACX,4BAAQA,UAAU,cAChB,yBAAKE,IAAKkB,IAAMpB,UAAU,gBAAgBI,IAAI,SAC9C,yDAuBKiB,EAfO,WACpB,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWT,KAEpC,yBAAKhB,UAAU,cACb,kBAAC,IAAD,CAAM0B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,eCzBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SDmIxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56c77afc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hypnotoad.cc947b4c.gif\";","import React from 'react';\nimport './meal.css'\n\nconst Meal = ({ meal }) => {\n  return (\n    <div className=\"mealCard\">\n     <p>Meal eaten at: {meal.time}</p>\n     <p><img className=\"mealImg\" src={process.env.PUBLIC_URL + '/' + meal.image} alt={meal.image} /></p>\n     <p>Description: {meal.description}</p>\n     <ul>\n     {\n      meal.measurements.map((measure, i) => <li key={i}>{measure.time}: <strong>{measure.value} mg/dL</strong></li>)\n     }\n     </ul>\n    </div>\n  );\n}\n\nexport default Meal;","import React from 'react';\nimport Meal from './meal';\nimport './meal.css'\n\nconst Day = ({ day }) => {\n  return (\n    <div className=\"dayCard\">\n        <p>\n            <strong>{day.date}</strong>\n        </p>\n        <div>\n            {\n                day.meals.map( (meal, i) => {\n                    return (\n                        <Meal meal={meal} key={i} />\n                    );\n                })                \n            }\n        </div>\n    </div>\n  );\n}\n\nexport default Day;","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport logo from './assets/hypnotoad.gif';\nimport './App.css';\nimport jsonData from './assets/registry.json';\nimport Day from './components/day';\n\nconst DiabetesPage = () => (\n    <div>\n      <h1>Blood glucose levels</h1>\n      {\n        jsonData.days.map( (day, i) => <Day day={day} key={i} />)\n      }\n    </div>\n);\n\nconst HomePage = () => (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"image-cropper\" alt=\"logo\" />\n          <p>\n            All hail the hypnotoad!\n          </p>\n        </header>\n    </div>\n);\n\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter basename='/'>\n      <div>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/hidoc' component={DiabetesPage} />\n      </div>\n      <div className='App-hidden'>\n        <Link to='/'>Home</Link>\n        <Link to='/hidoc'>Diabetes</Link>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}