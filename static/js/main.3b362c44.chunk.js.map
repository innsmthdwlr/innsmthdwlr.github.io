{"version":3,"sources":["assets/hypnotoad.gif","components/meal.js","components/day.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toDate","dStr","format","now","Date","setHours","substr","indexOf","setMinutes","setSeconds","emptyStomachCutoff","breakfastCutoff","dinnerCutoff","supperCutoff","Meal","meal","className","time","mealTime","measurements","noTag","tag","length","when","getMealTag","src","image","alt","description","map","measure","i","spanClass","measureTimeParam","measureValueParam","measureTime","measureValue","applyMeasurementClass","value","key","Day","day","diff","date","getTime","week","Math","ceil","meals","DiabetesPage","todayDate","todayFormatted","getFullYear","getMonth","getDate","useState","searchTerm","setSearchTerm","React","searchResults","setSearchResults","useEffect","results","jsonData","days","filter","type","name","onChange","event","target","HomePage","logo","App","basename","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b362c44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hypnotoad.cc947b4c.gif\";","import React from 'react';\nimport './meal.css'\n\nconst toDate = (dStr,format=\"h:m\") => {\n  var now = new Date();\n\tif (format === \"h:m\") {\n \t\tnow.setHours(dStr.substr(0,dStr.indexOf(\":\")));\n \t\tnow.setMinutes(dStr.substr(dStr.indexOf(\":\")+1));\n     now.setSeconds(0);\n \t\treturn now;\n\t}else \n\t\treturn \"Invalid Format\";\n}\nconst applyMeasurementClass = (measureTimeParam, measureValueParam) => {\n  let spanClass = 'measurement-ok'\n  if(measureTimeParam === 'n/a'){\n    spanClass = ''\n  }\n  else{\n    let measureTime = toDate(measureTimeParam,\"h:m\");\n    let measureValue = measureValueParam;\n    if (measureTime < toDate('07:00','h:m') && measureValue > 90){\n      spanClass = 'measurement-high';\n    }\n    if (measureTime >= toDate('07:00','h:m') && measureValue > 140){\n      spanClass = 'measurement-high';\n    }\n  }\n  return spanClass;  \n}\n\nconst emptyStomachCutoff = toDate('07:00','h:m');\nconst breakfastCutoff = toDate('10:00','h:m');\nconst dinnerCutoff = toDate('18:00','h:m');\nconst supperCutoff = toDate('21:00','h:m');\n\nconst getMealTag = (mealTime, measurements, noTag) => {\n  let tag = '';\n  if (measurements.length && !noTag){\n    const when = toDate(mealTime,\"h:m\")\n    switch (true){\n      case when < emptyStomachCutoff:\n        tag = 'EMPTY STOMACH';\n        break;\n      case when >= emptyStomachCutoff && when < breakfastCutoff:\n        tag = 'BREAKFAST';\n        break;\n      case when >= breakfastCutoff && when < dinnerCutoff:\n        tag = 'DINNER';\n        break;\n      case when >= dinnerCutoff && when < supperCutoff:\n        tag = 'SUPPER';\n        break;\n      default:\n        break;\n    }\n  }\n\n  return tag;\n}\n\nconst Meal = ({ meal }) => {\n  // let a = toDate(\"16:10\");\n  // let b = toDate(\"14:40\");\n  // console.log((a.getTime() - b.getTime())/ (1000 * 3600));\n  return (\n    <div className=\"mealCard\">\n     <p>Meal started at: {meal.time} <span className='measurement-tag'>{getMealTag(meal.time, meal.measurements, meal.noTag)}</span></p>\n     <p><img className=\"mealImg\" src={process.env.PUBLIC_URL + '/meals/' + meal.image} alt={meal.image} /></p>\n     <p>Content: {meal.description}</p>\n     <ul>\n      {\n        !(meal.measurements.length) ? '' :\n          meal.measurements.map( (measure, i) => {\n            let spanClass = applyMeasurementClass(measure.time, measure.value);\n            return (\n              <li key={i}>{measure.time}: <span className={spanClass}>{measure.value} mg/dL</span></li>\n            );\n          })\n      }\n     </ul>\n    </div>\n  );\n}\n\nexport default Meal;","import React from 'react';\nimport Meal from './meal';\nimport './meal.css'\n\nconst Day = ({ day }) => {\n    const diff = (new Date(day.date)).getTime() - (new Date('2019-05-19')).getTime();\n    const week = Math.ceil(diff / (1000 * 3600 * 24) / 7)\n\n    return (\n        <div className=\"dayCard\">\n            <p>\n                <strong>{day.date}</strong> {week}<sup>th</sup> week of pregnancy\n            </p>\n            <div>\n                {\n                    day.meals.map( (meal, i) => {\n                        return (\n                            <Meal meal={meal} key={i} />\n                        );\n                    })                \n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Day;","import React, {useState} from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport logo from './assets/hypnotoad.gif';\nimport './App.css';\nimport jsonData from './assets/registry.json';\nimport Day from './components/day';\n\ninterface Day\n{\n  \"date\": string; \n  \"meals\": { \n    \"time\": string; \n    \"image\": string; \n    \"description\": string; \n    \"noTag\": number;\n    \"measurements\": { \n      \"time\": string; \n      \"value\": number; \n    }[]; \n  }[]; \n}\n\n\nconst DiabetesPage = () => {\n  const todayDate = new Date();\n  const todayFormatted = todayDate.getFullYear() + '-' + (todayDate.getMonth()+1) + '-' + todayDate.getDate();\n  \n  const [searchTerm, setSearchTerm] = useState(todayFormatted);\n  const [searchResults, setSearchResults] = React.useState<Array<Day>>([]);\n\n  const handleChange = (event: any) => \n  {\n    setSearchTerm(event.target.value);\n  }\n\n  React.useEffect(() => {\n    const results = jsonData.days.filter( function (day:Day) {\n      return day.date === searchTerm;\n    });\n    setSearchResults(results);\n  }, [searchTerm]);\n\n  return (\n    <div>\n      <h1>Blood glucose levels</h1>\n      <div className='datepicker'>\n        <span>Pick a date: </span>\n        <input type=\"date\" name=\"dateFilter\" onChange={handleChange} value={searchTerm} />\n      </div>\n      <div>\n      {\n        searchResults.map( (day:any, i:number) => <Day day={day} key={i} />)\n      }\n      </div>\n    </div>\n  );\n}\n\nconst HomePage = () => (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"image-cropper\" alt=\"logo\" />\n          <p>\n            All hail the hypnotoad!\n          </p>\n        </header>\n    </div>\n);\n\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter basename='/'>\n      <div>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/hidoc' component={DiabetesPage} />\n      </div>\n      <div className='App-hidden'>\n        <Link to='/'>Home</Link>\n        <Link to='/hidoc'>Diabetes</Link>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}